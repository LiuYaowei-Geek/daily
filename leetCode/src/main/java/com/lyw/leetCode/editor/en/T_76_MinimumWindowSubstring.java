//Given two strings s and t of lengths m and n respectively, return the minimum 
//window substring of s such that every character in t (including duplicates) is i
//ncluded in the window. If there is no such substring, return the empty string ""
//. 
//
// The testcases will be generated such that the answer is unique. 
//
// A substring is a contiguous sequence of characters within the string. 
//
// 
// Example 1: 
//
// 
//Input: s = "ADOBECODEBANC", t = "ABC"
//Output: "BANC"
//Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' fr
//om string t.
// 
//
// Example 2: 
//
// 
//Input: s = "a", t = "a"
//Output: "a"
//Explanation: The entire string s is the minimum window.
// 
//
// Example 3: 
//
// 
//Input: s = "a", t = "aa"
//Output: ""
//Explanation: Both 'a's from t must be included in the window.
//Since the largest window of s only has one 'a', return empty string.
// 
//
// 
// Constraints: 
//
// 
// m == s.length 
// n == t.length 
// 1 <= m, n <= 105 
// s and t consist of uppercase and lowercase English letters. 
// 
//
// 
//Follow up: Could you find an algorithm that runs in O(m + n) time? Related Top
//ics Hash Table String Sliding Window 
// üëç 10236 üëé 535


package com.lyw.leetCode.editor.en;

//JavaÔºöT_76_Minimum Window Substring
public class T_76_MinimumWindowSubstring {
    public static void main(String[] args) {
        Solution solution = new T_76_MinimumWindowSubstring().new Solution();
        // TO TEST
        //Ê≠£Â∏∏ÊÉÖÂÜµ
        String s = "ADOBECODEBANC", t = "ABC";
        //‰∏çÂêàÁ¨¶Ë¶ÅÊ±ÇÊÉÖÂÜµ
        String s2 = "a", t2 = "b";
        //ÈáçÂ§çÂ≠óÁ¨¶ÊÉÖÂÜµ
        String s3 = "acbbaca", t3 = "aba";
        System.out.println(solution.minWindow(s, t));
        System.out.println(solution.minWindow(s2, t2));
        System.out.println(solution.minWindow(s3, t3));
        //a-z:97-122
        //A-Z:65-90
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        //ÊªëÂä®Á™óÂè£ÔºåÊó∂Èó¥Â§çÊùÇÂ∫¶O(s+t), Á©∫Èó¥Â§çÊùÇÂ∫¶O(s+t)
        public String minWindow(String s, String t) {
            //a-z:97-122
            //A-Z:65-90
            //128ÂèØ‰ª•Ë¶ÜÁõñA-zÊâÄÊúâÂ≠óÁ¨¶
            int[] map = new int[128];
            for (char c : t.toCharArray()) {
                //Ê†áËÆ∞t‰∏≠ÁöÑÂ≠óÁ¨¶ÔºåÂõ†‰∏∫Â≠óÁ¨¶ÂèØ‰ª•ÈáçÂ§çÔºåÊâÄ‰ª•Áî®‰ΩçÁΩÆÂíåÊ¨°Êï∞ËøõË°åÊ†áËÆ∞
                map[c]++;
            }
            //startÂíåendÊªëÂä®Á™óÂè£Â∑¶Âè≥ËæπÁïå
            //minStartÊúÄÂ∞èÂå∫Èó¥ÂºÄÂßã‰ΩçÁΩÆÔºåminLenÊúÄÂ∞èÂå∫Èó¥ÈïøÂ∫¶
            //counterËÆ°Êï∞Âô®ÔºåË°®Á§∫ÂΩìÂâçÁ™óÂè£ÊòØÂê¶ÂåÖÂê´t
            int start = 0, end = 0, minStart = 0, minLen = Integer.MAX_VALUE, counter = t.length();
            while (end < s.length()) {
                final char endChar = s.charAt(end);
                //end‰ΩçÁΩÆÂ≠óÁ¨¶Âú®t‰∏≠Â≠òÂú®ÔºåcounterÂáè‰∏Ä
                if (map[endChar] > 0) counter--;
                //Âú®t‰∏≠Â≠òÂú®‰∏îÂ§ÑÁêÜËøáÁöÑÂ≠óÁ¨¶Âáè‰∏ÄÔºåÂú®t‰∏≠‰∏çÂ≠òÂú®ÁöÑÂ≠óÁ¨¶Âáè‰∏Ä
                map[endChar]--;
                //Êâ©Â§ßÁ™óÂè£
                end++;
                //startÂà∞endÁ™óÂè£ÂåÖÂê´tÊâÄÊúâÁöÑÂ≠óÁ¨¶
                while (counter == 0) {
                    //ËÆ∞ÂΩïÊúÄÂ∞èÈïøÂ∫¶
                    if (minLen > end - start) {
                        minLen = end - start;
                        //Ë∑üÊñ∞ÊúÄÂ∞èÂå∫Èó¥Â∑¶ËæπÁïå‰ΩçÁΩÆ
                        minStart = start;
                    }
                    final char startChar = s.charAt(start);
                    //ÁßªÈô§Â∑¶ËæπÁïåÊó∂ÔºåÈúÄË¶ÅËøòÂéüÊ†áËØÜÔºå‰πãÂâçÊòØ--ÊâÄ‰ª•ËøôÈáåË¶Å++
                    map[startChar]++;
                    //start‰ΩçÁΩÆÂ≠óÁ¨¶Âú®t‰∏≠Â≠òÂú®ÔºåÁßªÈô§ÂêéÔºåËÆ°Êï∞Âô®Âä†1ÔºåÁ†¥ÊéâÂæ™ÁéØÔºåÂπ∂‰∏îË°®Á§∫ËøòÂ∑Æ‰∏Ä‰∏™Â≠óÁ¨¶‰ΩøÁ™óÂè£Êª°Ë∂≥ÂåÖÂê´tÁöÑÊù°‰ª∂
                    if (map[startChar] > 0) counter++;
                    //Áº©Â∞èÁ™óÂè£
                    start++;
                }
            }

            return minLen == Integer.MAX_VALUE ? "" : s.substring(minStart, minStart + minLen);
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}